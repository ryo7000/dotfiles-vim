*usr_31.txt*	For Vim バージョン 7.1.  Last change: 2007 May 08 和訳

		     VIM USER MANUAL - by Bram Moolenaar

				 ＧＵＩの活用


vimは端末でもちゃんと動きますが、ＧＵＩバージョンではさらに追加機能がありま
す。ファイルブラウザではファイルを扱うコマンド群が使えます。ダイアログボック
スでいくつかの選択肢から選択することもできます。メニュー項目を使うためにキー
ボードショートカットも用意しています。

|31.1|	ファイルブラウザ
|31.2|	確認
|31.3|	メニューのショートカット
|31.4|	vimウィンドウ位置と大きさ
|31.5|	その他

     Next chapter: |usr_32.txt|  undo ツリー
 Previous chapter: |usr_30.txt|  プログラムの編集
Table of contents: |usr_toc.txt|

==============================================================================
*31.1*	ファイルブラウザ

[ファイル]メニューの[開く...]を使うとファイルブラウザが開きます。これを使え
ば、編集したいファイルを探すのが簡単になります。でも、ウィンドウを分割してそ
こで別のファイルを編集したい場合はどうでしょうか？このためのメニュー項目はあ
りません。最初に[ウィンドウ]-[分割]を選んでから、[ファイル]-[開く...]を選択
すればできますが、余計な手間がかかります。
vimでほとんどのコマンドを入力するのであれば、同様にコマンドを入力してファイ
ルブラウザを開くことができます。ファイルブラウザで分割コマンドを使うには先に
"browse"を指定します。 >

	:browse split

ファイルを選択すると":split"コマンドがその結果に対して動きます。ファイルダイ
アログで「キャンセル」すれば何も起こらず、ウィンドウも開きません。
ファイル名を引数に指定することもできます。これはファイルブラウザにどのディレ
クトリから始めるかを指定するのに使います。例をあげましょう。 >

	:browse split /etc

ファイルブラウザは"/etc"ディレクトリを初期表示した状態でポップアップします。

":browse"コマンドはファイルを開くあらゆるコマンドに対して指定できます。
ディレクトリを指定しない場合は初期ディレクトリをvimが判断します。デフォルト
では、直前に使ったのと同じディレクトリとなります。ですから、":browse split"
を使った時に"/usr/local;share"にあるファイルを選択したとすると、次にファイル
ブラウザを":browse split"で起動した時は"/usr/local/share"で始まります。
この動作は'browsedir'オプションの指定で変更できます。ここでは以下の３つの値
を指定できます。

	last		直前に使ったディレクトリを使う(デフォルト)
	buffer		カレントバッファと同じディレクトリを使う
	current		カレントディレクトリを使う

例えば、"/usr"ディレクトリにある時に"/usr/local/share/readme"を編集するには
次のコマンドを使います。 >

	:set browsedir=buffer
	:browse edit

この指定だと、"/usr/local/share"ディレクトリでブラウザが開始します。また、次
のような指定ですと、"/usr"ディレクトリで開始します。 >

	:set browsedir=current
	:browse edit
<
	Note:
	マウスを使わなくてもよいように、ファイルブラウザのほとんどの繰作で
	キー入力をサポートしています。これはシステム毎に違っているためここで
	は説明しません。vimはできるだけ標準ブラウザを用います。お使いのシス
	テムのマニュアルなどのどこかにキーボードショートカットの説明があるこ
	とでしょう。

ＧＵＩでないバージョンを使っている場合でも、ファイルエクスプローラのウィンド
ウを使えば、ファイルブラウザと同じようにファイル選択ができます。ですがその場
合でも":browse"コマンドは使えません。|netrw-browse|をご覧ください。

==============================================================================
*31.2*	確認

vimは間違ってファイルを上書きしたり、変更点を失ってしまうような様々なことか
らあなたを守ります。何かマズいことになりそうな時はvimはエラーメッセージで、
本当にそれをやりたければ"!"を追加するように、と表示します。だから本当にやり
たければそうすればよいのです。
"!"付きコマンドの再入力が嫌なら、vimにダイアログボックスを表示させることもで
きます。その画面で"OK"か"Cancel"を選んでやりたいことをvimに伝えることができ
ます。
例えば、ファイルを編集して変更を加えたとします。ここで別のファイルを編集しよ
うとします。 >

	:confirm edit foo.txt

vimは次のようなダイアログ画面を表示します。

	+-----------------------------------+
	|				    |
	|   ?	Save changes to "bar.txt"?  |
	|				    |
	|   YES   NO		 CANCEL     |
	+-----------------------------------+

ここで選択ができます。ファイルを保存するのなら"YES"を選びます。変更内容を失
くしてもよいのなら、"NO"を選びます。どんな変更を加えたか忘れてしまって、再確
認したい場合には"CANCEL"を選びます。この場合は変更されたその状態のままで、同
じファイルに戻ることができます。

":browse"の場合と同じく、":confirm"コマンドも別のファイルを編集するほとんど
のコマンドの前に指定できます。この両方を組み合せるのもＯＫです。 >

	:confirm browse edit

これはカレントバッファを変更している場合にダイアログを表示します。次に編集す
るファイルを選択するためにファイルブラウザを表示します。

	Note:
	ダイアログの表示中はキーボードで選択ができます。たいていは<Tab>キー
	と矢印キーで変更します。<Enter>キーを押すと選択結果を実行します。但
	しこの動きはシステムによって異なります。

ＧＵＩでないバージョンでも、":confirm"コマンドはきちんと動きます。ダイアログ
画面を表示する代わりに、vimはウィンドウの最下段にメッセージを表示し、選択肢
を選ぶように促します。 >

	:confirm edit main.c
<	Save changes to "Untitled"? ~
	[Y]es, (N)o, (C)ancel:  ~

どれか１つの文字を押して選択ができます。他のコマンド行での場合と違い、ここで
は<Enter>キーを押す必要はありません。

==============================================================================
*31.3*	メニューのショートカット

キーボードでは全てのvimのコマンドが使えます。何を呼び出せばよいか知らない利
用者のため簡単にコマンド選択できるメニューがあります。ですが、それにはキー
ボードから手を離し、マウスを動かす必要があります。
メニューはキーを使っても問題なく使うことができます。これはシステムによります
が、ほとんどの場合にこの方法で動きます。メニューで下線の引いてある文字と<Alt>
キーを同時に押して使います。例えば、<A-w> (これは<Alt>と"w"のこと)を押すと、
ウィンドウメニューをプルダウン(ポップアップ)します。
ウィンドウメニューには"分割(P)"という項目があり、"P"に下線が引いてあります。
これを選ぶには<Alt>キーと"p"を押しましょう。

最初に<Alt>キーでメニューを選んだ後で、カーソルキーを使ってメニュー内を移動
することができます。<Right>はサブメニューを開き、<Left>はそれを閉じます。
<Esc>もメニューを閉じます。<Enter>は選択した項目を実行します。

メニューを選ぶための<Alt>キーの利用と、マップのコンビネーションキーとしての
<Alt>キーの利用が重複することがあります。'winaltkeys'オプションでは、<Alt>
キーを使った時にvimが何をすべきかを定義できます。
'winaltkeys'のデフォルト値、"menu"としておくのが良いでしょう。この場合、メ
ニューのショートカットにあるコンビネーションはマップとして登録できません。
マップにはそれ以外の組み合せを用います。
'winaltkeys'を"no"とすると、<Alt>キーではメニュー選択できなくなります。つま
り、メニューの選択にはマウスを使わなければなりません。その代わり<Alt>キーは
マップで自由に使えるようになります。
"yes"とすると、<Alt>キーの全てがメニュー用となります。ただしメニュー選択以外
に他の機能で使われる<Alt>キーコンビネーションもいくつかあります。

==============================================================================
*31.4*	vimウィンドウの位置と大きさ

スクリーン上の現在のvimウィンドウの位置を見るのはこのコマンドです。 >

	:winpos

これはＧＵＩ版でのみ動きます。出力はこのようになります。 

	Window position: X 272, Y 103 ~

位置は画面のピクセル単位です。さてvimのウィンドウは数値指定で別の場所に移動
できます。例えば、上の例で100ピクセル左に動かすにはこうします。 >

	:winpos 172 103
<
	Note:
	報告される座標とウィンドウが動いた場所とは多少の差異がある場合があり
	ます。これはウィンドウ枠の巾があるためです。これはウィンドウマネー
	ジャ側で算出されるものです。

このコマンドはvimを起動した時のスタートアップスクリプトでウィンドウを特定の
場所で開くコマンドとして使えます。

vimのウィンドウサイズは文字数で求めます。つまりウィンドウサイズのピクセル数
は使用するフォントの大きさに依るということです。現在のウィンドウサイズはこの
コマンドで求められます。 >

	:set lines columns

サイズを変更するには、'lines'と'columns'オプションに値を設定します。 >

	:set lines=50
	:set columns=80

端末で動かしている時でもＧＵＩ版と同様にサイズを得ることができます。ですが、
ほとんどの端末ではサイズを変更することはできません。

gvimのX Window版では起動時にウィンドウの大きさと位置をパラメタで指定できま
す。 >

	gvim -geometry {width}x{height}+{x_offset}+{y_offset}

{width}と{height}は文字数です。{x_offset}と{y_offset}はピクセル数です。
例をあげましょう。 >

	gvim -geometry 80x25+100+300

==============================================================================
*31.5*	その他

gvimはＥメールの編集にも使えます。それにはお使いのメーラでエディタとしてgvim
を指定しなければなりません。ところがこれをやろうとしても、おそらくうまくいき
ません。gvimがまだ動いているにも関らず、メーラ側は編集が終わったと思い込むた
めです。
これはgvimが起動する時にシェルから切り離しているために起こることです。
これはvimを端末で動かすとよくわかります。というのはその端末で他のことが実行
できるからです。ですが、gvimが終るまで待つようにさせたいのであれば、切断しな
いようにしなければなりません。これには"-f"パラメタを使います。 >

	gvim -f file.txt

"-f"は"foreground"の意味です。これでvimの起動時から、編集が終わって終了する
までシェルをブロックします。


ＧＵＩの遅延スタート
--------------------

Unixではvimを端末で使うこともできます。これは同じシェルでいろんな作業を行う
時には便利です。ファイルを編集している時に後になってＧＵＩを使いたいと思った
場合は、こうします。 >

	:gui

vimはＧＵＩのウィンドウを開き、端末を開放します。端末では他の作業を続けるこ
とができます。ＧＵＩ版をフォアグラウンドで動かすには"-f"パラメタを使います。
":gui -f"も使えるということです。


gvimのスタートアップファイル
----------------------------

gvimの起動時にはgvimrcファイルを読み込みます。これはvim起動時に使うvimrcファ
イルと同じようなものです。gvimrcファイルにはＧＵＩを使って起動する時にだけ指
定したいような設定やコマンドを実行させるのに使います。例えば、ウィンドウのサ
イズを変更するのに'lines'オプションに値をセットできます。 >

	:set lines=55

上の指定は（サイズ変更をサポートしているxtermででもない限り）端末では行桁数
は固定ですから、GUI以外では不要でしょう。
gvimrcファイルはvimrcファイルと同じ場所を探します。通常はUnixで"~/.gvimrc"、
MS-Windowsでは"$VIM/_gvimrc"というファイル名となります。
環境変数$MYGVIMRCの値がそれになります。よって次のコマンドでそのファイルを編集
することができます: >

	:edit $MYGVIMRC
<
何らかの理由でいつものgvimrcファイルを使いたくない場合は、"-U"パラメタを使っ
て、他のファイルを指定することができます。 >

	gvim -U thisrc ...

これだと例えばフォントサイズを変更するなっ、いつもと違う環境でgvimによる編集
が行えます。
完全にgvimrcファイルの読み込みをスキップさせるにはこうします。 >

	gvim -U NONE ...

==============================================================================

Next chapter: |usr_32.txt|  undo ツリー

Copyright: see |manual-copyright|  vim:tw=78:ts=8:ft=help:norl:
